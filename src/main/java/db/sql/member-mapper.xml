<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<!-- 로그인요청 -->
	<entry key="loginMember">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , MEM_NICKNAME
		     , MEM_EMAIL
		     , MEM_PHONE
		     , MEM_ADDR
		     , GENDER
		     , MEM_BIRTH
		     , MEM_PROFILE
		     , INTEREST
		     , GRADE
		     , ENROLL_DATE
		     , MEM_UPDATE
		     , MEM_STATUS
		     , MEM_DROP
		  FROM MEMBER
	     WHERE MEM_ID = ?
	       AND MEM_PWD = ?
	       AND MEM_STATUS = 'Y'
	</entry>
	
	<!-- 이메일중복체크요청 -->
	<entry key="checkEmail">
		SELECT
		       MEM_NO
		  FROM MEMBER
		 WHERE MEM_EMAIL = ?
	</entry>
	
	<!-- 회원가입요청 -->
	<entry key="insertMember">
		INSERT
		   INTO MEMBER
		   (
		   	 MEM_NO
		   , MEM_ID
		   , MEM_PWD
		   , MEM_NAME
		   , MEM_NICKNAME
		   , MEM_EMAIL
		   , MEM_PHONE
		   , MEM_ADDR
		   , GENDER
		   , MEM_BIRTH
		   , MEM_PROFILE
		   , INTEREST
		   , GRADE
		   )
		   VALUES 
		   (
		     SEQ_MBNO.NEXTVAL
		   , ?
		   , ?
		   , ?
		   , ?
		   , ?
		   , ?
		   , ?
		   , ?
		   , ?
		   , ?
		   , ?
		   , 1
		   )
		   
	</entry>
	
	<!-- 프로필사진등록요청 -->
	<entry key="insertAttachment">
		UPDATE MEMBER
		   SET MEM_PROFILE = ?
		 WHERE MEM_NO = SEQ_MBNO.CURRVAL
	</entry>
	
	<!-- 아이디 중복체크요청 -->
	<entry key="idCheck">
		SELECT 
		       COUNT(*) "COUNT"
		  FROM MEMBER
		 WHERE MEM_ID = ?
	</entry>
	
	<!-- 닉네임 중복체크요청 -->
	<entry key="nickCheck">
		SELECT 
		       COUNT(*) "COUNT"
		  FROM MEMBER
		 WHERE MEM_NICKNAME = ?
	</entry>
	
	
	
	<!-- 수강한클래스수 -->
	<entry key="registerCount">
		SELECT
		       COUNT(*) "COUNT"
		  FROM REGISTER
		 WHERE MEM_NO = ?
	</entry>
	
	<!-- 찜한클래스수 -->
	<entry key="likeCount">
		SELECT
		      COUNT(*) "COUNT"
		  FROM LIKE
		 WHERE MEM_NO = ?
	</entry>
	
	<!-- 회원정보 수정요청 -->
	<entry key="updateMember">
		UPDATE MEMBER
		   SET MEM_NICKNAME = ?
		     , MEM_EMAIL = ?
		     , MEM_PHONE = ?
		     , MEM_ADDR = ?
		     , GENDER = ?
		     , MEM_BIRTH = ?
		     , MEM_PROFILE = ?
		     , INTEREST = ?
		     , MEM_UPDATE = SYSDATE
		 WHERE MEM_ID = ?
	</entry>
	
	<!-- 수정한회원정보 요청 -->
	<entry key="selectMember">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , MEM_NICKNAME
		     , MEM_EMAIL
		     , MEM_PHONE
		     , MEM_ADDR
		     , GENDER
		     , MEM_BIRTH
		     , MEM_PROFILE
		     , INTEREST
		     , GRADE
		     , ENROLL_DATE
		     , MEM_UPDATE
		     , MEM_STATUS
		     , MEM_DROP
		  FROM MEMBER
	     WHERE MEM_ID = ?
	       AND MEM_STATUS = 'Y' 
	</entry>
	
	<!-- 비밀번호 수정 요청 -->
	<entry key="updatePwd">
		UPDATE MEMBER
		   SET MEM_PWD = ?
             , MEM_UPDATE = SYSDATE
		 WHERE MEM_ID = ?
		   AND MEM_PWD = ?
	</entry>
	
	<!-- 회원 탈퇴 요청 -->
	<entry key="deleteMember">
		UPDATE MEMBER
		   SET MEM_DROP = ?
		     , MEM_STATUS = 'N'
		 WHERE MEM_ID = ?
		   AND MEM_PWD = ?
	</entry>
	
	<!-- 튜터등록한 회원 정보 조회 -->
	<entry key="selectTutorMember">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , MEM_NICKNAME
		     , MEM_EMAIL
		     , MEM_PHONE
		     , MEM_ADDR
		     , GENDER
		     , MEM_BIRTH
		     , MEM_PROFILE
		     , INTEREST
		     , GRADE
		     , ENROLL_DATE
		     , MEM_UPDATE
		     , MEM_STATUS
		     , MEM_DROP
		  FROM MEMBER
	     WHERE MEM_NO = ?
	       AND MEM_STATUS = 'Y' 
	</entry>
	
	<!-- 이름과 이메일주소 일치하는 회원정보 조회 -->
	<entry key="emailCheckForId">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , MEM_NICKNAME
		     , MEM_EMAIL
		     , MEM_PHONE
		     , MEM_ADDR
		     , GENDER
		     , MEM_BIRTH
		     , MEM_PROFILE
		     , INTEREST
		     , GRADE
		     , ENROLL_DATE
		     , MEM_UPDATE
		     , MEM_STATUS
		     , MEM_DROP
		  FROM MEMBER
	     WHERE MEM_NAME = ?
	       AND MEM_EMAIL = ?
	       AND MEM_STATUS = 'Y'
	</entry>
	
	<!-- 아이디와 이메일이 일치하는 회원정보 찾기 -->
	<entry key="emailCheckForPwd">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , MEM_NICKNAME
		     , MEM_EMAIL
		     , MEM_PHONE
		     , MEM_ADDR
		     , GENDER
		     , MEM_BIRTH
		     , MEM_PROFILE
		     , INTEREST
		     , GRADE
		     , ENROLL_DATE
		     , MEM_UPDATE
		     , MEM_STATUS
		     , MEM_DROP
		  FROM MEMBER
	     WHERE MEM_ID = ?
	       AND MEM_EMAIL = ?
	       AND MEM_STATUS = 'Y'
	</entry>
	
	<!-- 기존비밀번호없이 아이디만으로 새로운 비밀번호로 변경하기 -->
	<entry key="updatePwd2">
		UPDATE MEMBER
		   SET MEM_PWD = ?
             , MEM_UPDATE = SYSDATE
		 WHERE MEM_ID = ?
	</entry>
	
	<!-- 회원이름, 연락처로 회원정보 조회 -->
	<entry key="phoneCheckForId">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , MEM_NICKNAME
		     , MEM_EMAIL
		     , MEM_PHONE
		     , MEM_ADDR
		     , GENDER
		     , MEM_BIRTH
		     , MEM_PROFILE
		     , INTEREST
		     , GRADE
		     , ENROLL_DATE
		     , MEM_UPDATE
		     , MEM_STATUS
		     , MEM_DROP
		  FROM MEMBER
	     WHERE MEM_NAME = ?
	       AND MEM_PHONE = ?
	       AND MEM_STATUS = 'Y'
	</entry>

	<entry key="phoneCheckForPwd">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , MEM_NICKNAME
		     , MEM_EMAIL
		     , MEM_PHONE
		     , MEM_ADDR
		     , GENDER
		     , MEM_BIRTH
		     , MEM_PROFILE
		     , INTEREST
		     , GRADE
		     , ENROLL_DATE
		     , MEM_UPDATE
		     , MEM_STATUS
		     , MEM_DROP
		  FROM MEMBER
	     WHERE MEM_ID = ?
	       AND MEM_PHONE = ?
	       AND MEM_STATUS = 'Y'
	</entry >
	
	<entry key="selectMyLikeClassList">
	SELECT 
	       L.CL_NO "CL_NO"
	     , DISTR_NAME
	     , CL_NAME
	     , TO_CHAR(CL_PRICE, '999,999,999') || '원' "CL_PRICE"
	     , CL_THUMB
	     , (SELECT AVG(RE_STAR) 
	          FROM REVIEW R
	         WHERE R.CL_NO = C.CL_NO) "STAR_AVG"
	     , (SELECT COUNT(RE_STAR) 
	          FROM REVIEW R
	         WHERE R.CL_NO = C.CL_NO) "STAR_COUNT"
	     , (SELECT COUNT(*)
	          FROM "LIKE" L
	         WHERE L.CL_NO = C.CL_NO
	         GROUP BY L.CL_NO) "LIKE_COUNT"
	  FROM "LIKE" L
	  LEFT OUTER JOIN CLASS C
	    ON C.CL_NO = L.CL_NO
	  LEFT OUTER JOIN DISTRICT D
	    ON D.DISTR_CODE = C.DISTR_CODE    
	 WHERE L.MEM_NO = ?
	  ORDER BY LIKE_DATE DESC
	
	</entry>
	
	<entry key="deleteLikeClassList">
		DELETE 
		  FROM "LIKE"
		 WHERE CL_NO = ?
		   AND MEM_NO = ?
	</entry>
	
	<entry key="phoneCheckForCertifi">
		SELECT
		       MEM_NO
		     , MEM_PHONE
		  FROM MEMBER
		 WHERE MEM_PHONE = ?
           AND MEM_STATUS = 'Y'
	</entry>

	<entry key="regCount">
		SELECT COUNT(REG_NO) "REG"
		  FROM REGISTER
		 WHERE MEM_NO = ?
		   AND REG_STA = 2
	</entry>
	
	<entry key="likeCount">
		SELECT COUNT (LIKE_DATE) "LIKE"
		  FROM "LIKE"
		 WHERE MEM_NO = ?
	</entry>
	
	<entry key="revCount">
		SELECT COUNT(RE_NO) "REV"
		  FROM REVIEW W
		  JOIN REGISTER R ON (W.REG_NO = R.REG_NO)
		 WHERE R.MEM_NO = ?
	</entry>
	
	<entry key="nickCheck2">
	SELECT MEM_NICKNAME
	 FROM MEMBER
	WHERE MEM_NO = ?
	  AND MEM_NICKNAME = ?
	</entry>
</properties>