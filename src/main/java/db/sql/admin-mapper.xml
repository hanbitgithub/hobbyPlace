<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	
	<!-- 총 클래스 개수  -->
	<entry key="selectClassCount">
	
	SELECT COUNT(*) "count"
	FROM CLASS
	
	
	</entry>
	<!-- 클래스 리스트 조회 -->
	<entry key="selectClassList">
	
	 SELECT *
	 FROM
	  (	
		SELECT ROWNUM RNUM, A.*
		FROM	
			(
			 SELECT 
					 CL_NO
					,G.CT_NAME
					,T.TT_NAME
					,CL_NAME
					,C.ENROLL_DATE
					,CL_STATUS
					
				FROM CLASS C
				JOIN CATEGORY G USING (CT_NO)
				JOIN TUTOR T USING (MEM_NO)
			    ORDER BY CL_NO DESC
			)A
	  )	
	WHERE RNUM BETWEEN ?   AND ?
	</entry>
	
	<!--관리자 로그인 -->
	<entry key = "adminLogin">
	SELECT 
      		MEM_ID,
      	    MEM_PWD,
      	    MEM_NAME
       FROM MEMBER
	  WHERE MEM_ID =?
	    AND MEM_PWD = ?
	    AND GRADE = 0
	    AND MEM_STATUS = 'Y'
	</entry>
	
	<!-- 카테고리 대분류 조회 -->	
	<entry key="selectCategoryList">
		SELECT CT_NO
			  ,CT_NAME
		FROM  CATEGORY

	</entry>
	<!-- 세부카테고리 조회 -->
	<entry key="selectDcategoryList">
		SELECT CT_DNO
		      ,CT_NO
		      ,CT_DNAME
		 FROM DCATEGORY     

	</entry>		
	
	<!-- 클래스 상세조회 -->
	<entry key="selectClass">
		SELECT 
	        CL_NO,
	        CT_NAME,
	        CT_DNAME,
	        TT_NAME,
	        LOCAL_NAME,
	        DISTR_NAME,
	        CL_NAME,
	        CL_ADDRESS,
	        CL_MAX,
	        CL_LEVEL,
	        START_DATE,
	        END_DATE,
	        CL_TIMES,
	        CL_SCHEDULE,
	        CL_DAY,
	        TO_CHAR(CL_PRICE, '999,999,999')"CL_PRICE",
	        CL_DETAIL,
	        CURRICULUM,
	        REFUNDPOLICY,
	        CL_SUPPLIES,
	        KEYWORD,
	        C.ENROLL_DATE,
	        CL_STATUS,
	        CL_THUMB,
	        INTRODUCE
	   FROM CLASS C
	   JOIN CATEGORY G USING (CT_NO)
	   JOIN DCATEGORY D USING (CT_DNO)
	   JOIN TUTOR T USING (MEM_NO)
	   JOIN LOCATION USING (LOCAL_CODE)
	   JOIN DISTRICT USING (DISTR_CODE)
	  WHERE CL_NO =?
   
		
	
	</entry>
	
	
	<entry key="selectDetail">
	SELECT CL_DETAIL
	  FROM CLASS
	 WHERE CL_NO =?
	
	
	</entry>
	
	<!-- 스케줄조회 -->
	<entry key="selectSchedule">
	SELECT SCH_NO
		  ,CL_NO
		  ,SESSION_NO
		  ,START_TIME
		  ,END_TIME
	FROM SCHEDULE	
	WHERE CL_NO = ?  
	</entry>
		
		
	<!-- 신규클래스 개수 조회 -->	
	<entry key="selectNewClassCount">
	SELECT COUNT(*) "count"
	FROM CLASS
	WHERE CL_STATUS =0
	
	</entry>
	
	<!-- 신규클래스 리스트 조회 -->
	<entry key="selectNewClassList">
	
	 SELECT *
	 FROM
	  (	
		SELECT ROWNUM RNUM, A.*
		FROM	
			(
			 SELECT 
					 CL_NO
					,G.CT_NAME
					,T.TT_NAME
					,CL_NAME
					,C.ENROLL_DATE
					,CL_STATUS
					
				FROM CLASS C
				JOIN CATEGORY G USING (CT_NO)
				JOIN TUTOR T USING (MEM_NO)
				WHERE CL_STATUS = 0
			    ORDER BY CL_NO DESC
			)A
	  )	
	WHERE RNUM BETWEEN ?   AND ?
	</entry>
	
	<!-- 클래스번호에 따른 튜터정보  -->
	<entry key="selectTutor">
		   
	 SELECT MEM_NO
	        ,TT_NAME
	        ,INTRODUCE
	        ,TT_PROFILE
	   FROM TUTOR
	   JOIN CLASS USING (MEM_NO)
	  WHERE CL_NO= ?
 
	
	</entry>

	<!-- 관리자 클래스 승인 -->
	<entry key="classApprovalUpdate">
	UPDATE CLASS
	  SET UPDATE_DATE = SYSDATE
	     , CL_STATUS = 2
	WHERE  CL_NO =?   

	</entry>
	
	<!-- 관리자 클래스 반려 -->
	<entry key="classRefuseUpdate">
	UPDATE CLASS
	  SET UPDATE_DATE = SYSDATE
	     , CL_STATUS = 1
	     , CL_REFUSE = ?
	WHERE  CL_NO =?   

	</entry>
	
	
		<!-- 클래스 첨부파일 조회 -->
	<entry key="selectAttachment">
		SELECT 
				FILE_NO
			   ,ORIGIN_NAME
			   ,CHANGE_NAME
			   ,FILE_PATH
	    FROM ATTACHMENT
	    WHERE REF_NO = ?
	       

	</entry>
	
	<!-- 관리자 클래스 관리 -->
	<entry key="searchClass">
	SELECT
			CL_NO
			,G.CT_NAME
			,T.TT_NAME
			,CL_NAME
			,TO_CHAR(C.ENROLL_DATE, 'YYYY-MM-DD') "ENROLL_DATE"
			,CL_STATUS
		
			FROM CLASS C
			JOIN CATEGORY G USING (CT_NO)
			JOIN TUTOR T USING (MEM_NO)
			WHERE 1=1
			

	
	</entry>
	
	<!-- 기본검색으로 회원조회시 회원리스트 -->
	<entry key="selectMemberList1">
		SELECT
		       MEM_NO
		     , MEM_NAME
		     , DECODE(GRADE, '0', '관리자', '1', '등록안함', '2', '튜터') "GRADE"
		     , TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD') "ENROLL_DATE"
		     , (SELECT COUNT(REG_NO)
		          FROM REGISTER R
		         WHERE REG_STA = '2'
		           AND MEM_NO = M.MEM_NO) "REGCOUNT"   
		     , (SELECT COUNT(RE_NO) 
		          FROM REVIEW
		         WHERE RE_STA = 'Y'
		           AND MEM_NO = M.MEM_NO) "REVCOUNT"
		     , (SELECT COUNT(CL_NO)
		          FROM "LIKE"
		         WHERE MEM_NO = M.MEM_NO) "LIKECOUNT"
		     , (SELECT SUM(REG_PRICE)
		          FROM REGISTER
		         WHERE REG_STA = '2'
		          AND MEM_NO = M.MEM_NO) "TOTALPAY"
		     , NVL(MEM_EMAIL, '미등록') "MEM_EMAIL"
		     , MEM_PHONE
		     , REPLACE(MEM_ADDR, '///', ' ') "MEM_ADDR"
		     , GENDER
		     , MEM_STATUS
		  FROM MEMBER M
		 WHERE GRADE LIKE ?
		 ORDER BY
	</entry>
	
	
		
	<!-- 회원번호로 회원정보 조회 -->
	<entry key="selectMemberByNo">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , MEM_NICKNAME
		     , MEM_EMAIL
		     , MEM_PHONE
		     , REPLACE(MEM_ADDR, '///', ' ') "MEM_ADDR"
		     , GENDER
		     , MEM_BIRTH
		     , MEM_PROFILE
		     , INTEREST
		     , DECODE(GRADE, '0', '관리자', '1', 'N', '2', 'Y') "GRADE"
		     , ENROLL_DATE
		     , MEM_UPDATE
		     , MEM_STATUS
		     , MEM_DROP
		     , (SELECT COUNT(REG_NO)
		          FROM REGISTER R
		         WHERE REG_STA = '2'
		           AND MEM_NO = M.MEM_NO) "REGCOUNT" 
		     		     , (SELECT COUNT(RE_NO) 
		          FROM REVIEW
		         WHERE RE_STA = 'Y'
		           AND MEM_NO = M.MEM_NO) "REVCOUNT"
		     , (SELECT COUNT(CL_NO)
		          FROM "LIKE"
		         WHERE MEM_NO = M.MEM_NO) "LIKECOUNT"
		     , (SELECT SUM(REG_PRICE)
		          FROM REGISTER
		         WHERE REG_STA = '2'
		          AND MEM_NO = M.MEM_NO) "TOTALPAY"
		     , (SELECT AVG(RE_STAR)
                  FROM REVIEW
		         WHERE RE_STA = 'Y'
		           AND MEM_NO = M.MEM_NO) "STARAVG"
		  FROM MEMBER M
	     WHERE M.MEM_NO = ? 
	</entry>

	<!-- 회원번호로 qna리스트 select -->	
	<entry key="selectAllQna">
		SELECT 
		       Q_NO
		     , Q_TITLE
		     , Q_CONTENT
		     , TO_CHAR(Q_DATE, 'YYYY-MM-DD') "Q_DATE"
		     , Q_STATUS
		     , Q_GRADE
		     , Q_CATEGORY
		     , CL_NO
		     , Q_MEM_NO
		     , A_TITLE
		     , A_CONTENT
		     , TO_CHAR(A_DATE, 'YYYY-MM-DD') "A_DATE"
		     , A_MEM_NO
		     , TT_NAME
		  FROM QNA 
		  JOIN TUTOR ON(A_MEM_NO = MEM_NO)
		 WHERE Q_STATUS = 'Y'
   		   AND Q_MEM_NO = ?
	</entry>
	
<!-- 회원번호로 수강한클래스 리스트 select -->
	<entry key="selectAllRegister">
		SELECT
		       REG_NO
		     , R.MEM_NO "MEM_NO"
		     , R.CL_NO "CL_NO"
		     , C.CL_NAME "CL_NAME"
		     , R.TEACH_DATE "TEACH_DATE"
		     , REG_DATE
		     , SCH_NO
		     , REG_PAY
		     , REG_PRICE
		     , REG_COUNT
		     , REG_STA
		     , REG_REFUSE
		     , RE_ENROLL
		     , REG_CAL
		     , TT_NAME
		     , CT_NAME
		     , CT_DNAME
		  FROM REGISTER R
		  JOIN CLASS C ON (R.CL_NO = C.CL_NO) 
		  JOIN TUTOR T ON (C.MEM_NO = T.MEM_NO)
		  JOIN CATEGORY O ON (C.CT_NO = O.CT_NO)
		  JOIN DCATEGORY Y ON (C.CT_DNO = Y.CT_DNO)
		 WHERE R.MEM_NO = ?
	</entry>
	
	<!-- 회원번호로 리뷰리스트 select -->
	<entry key="selectAllReview">
		SELECT 
		       RE_NO
		     , "CONTENT"
		     , RE_STAR
		     , RE_DATE
		     , RE_UPDATE
		     , RE_STA
		     , REG_NO
		     , R.CL_NO
		     , R.MEM_NO
		     , CL_NAME
		  FROM REVIEW R
		  JOIN CLASS C ON (R.CL_NO = C.CL_NO)
		 WHERE R.MEM_NO = ?
	</entry>
	
	<!-- 회원번호로 좋아요리스트 select -->
	<entry key="selectALlLike">
		SELECT 
		       C.CL_NAME "CL_NAME"
		     , L.MEM_NO "MEM_NO"
		     , TO_CHAR(LIKE_DATE, 'YYYY-MM-DD') "LIKE_DATE"
		     , CT_NAME
		     , CT_DNAME
		     , TT_NAME
		  FROM "LIKE" L
		  JOIN CLASS C ON (L.CL_NO = C.CL_NO)
		  JOIN CATEGORY O ON (C.CT_NO = O.CT_NO)
		  JOIN DCATEGORY Y ON (C.CT_DNO = Y.CT_DNO)
		  JOIN TUTOR T ON (C.MEM_NO = T.MEM_NO)
		 WHERE L.MEM_NO = ?
	</entry>
	
	
	<!-- 체크박스 체크된 클래스번호만 반려 -->
	<entry key="checkedClassReject">
		UPDATE CLASS
		  SET UPDATE_DATE = SYSDATE
		     , CL_STATUS = 1
		     , CL_REFUSE = ?
		WHERE  CL_NO IN (  

	</entry>
	
	<!-- 체크박스 체크된 클래스만 승인 -->
	<entry key="checkedClassApprove">
		UPDATE CLASS
		  SET UPDATE_DATE = SYSDATE
		     , CL_STATUS = 2
		WHERE  CL_NO IN (  

	</entry>
	
	<!-- 회원목록리스트 세부검색 -->
	<entry key="selectMemberList2">
		SELECT
		       MEM_NO
		     , MEM_NAME
		     , DECODE(GRADE, '0', '관리자', '1', '등록안함', '2', '튜터') "GRADE"
		     , TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD') "ENROLL_DATE"
		     , (SELECT COUNT(REG_NO) 
		          FROM REGISTER R
		         WHERE REG_STA = '2'
		           AND MEM_NO = M.MEM_NO) "REGCOUNT"   
		     , (SELECT COUNT(RE_NO) 
		          FROM REVIEW
		         WHERE RE_STA = 'Y'
		           AND MEM_NO = M.MEM_NO) "REVCOUNT"
		     , (SELECT COUNT(CL_NO)
		          FROM "LIKE"
		         WHERE MEM_NO = M.MEM_NO) "LIKECOUNT"
		     , (SELECT SUM(REG_PRICE)
		          FROM REGISTER
		         WHERE REG_STA = '2'
		          AND MEM_NO = M.MEM_NO) "TOTALPAY"
		     , NVL(MEM_EMAIL, '등록안함') "MEM_EMAIL"
		     , MEM_PHONE
		     , REPLACE(MEM_ADDR, '///', ' ') "MEM_ADDR"
		     , GENDER
		     , MEM_STATUS
		  FROM MEMBER M
		 WHERE GRADE LIKE ?
   		   AND M.ENROLL_DATE BETWEEN ? AND ?
   		   AND 
	</entry>
	
	<entry key="selectTutorList1">
		SELECT
		       T.MEM_NO
		     , MEM_NAME
		     , MEM_ID
		     , TT_NAME
             , (SELECT COUNT(CL_NO)
                  FROM CLASS
                 WHERE CL_STATUS = 2
                   AND MEM_NO = T.MEM_NO) "CLASSACTIVE"
             , (SELECT COUNT(CL_NO)
                  FROM CLASS
                 WHERE CL_STATUS IN ('2', '3')
                   AND MEM_NO = T.MEM_NO) "CLASSTOTAL"
             , (SELECT SUM(REG_COUNT)
                  FROM REGISTER
                 WHERE MEM_NO = T.MEM_NO) "TUTEETOTAL"
             , (SELECT COUNT(CL_NO)
                  FROM "LIKE"
                  WHERE MEM_NO = T.MEM_NO) "LIKECOUNT"
             , (SELECT COUNT(RE_NO) 
                  FROM REVIEW
                 WHERE RE_STA = 'Y'
                   AND MEM_NO = T.MEM_NO) "REVCOUNT"
             , (SELECT SUM(REG_PRICE)
                  FROM REGISTER
                 WHERE REG_STA = '2'
                  AND MEM_NO = T.MEM_NO) "INCOMETOTAL"
             , REPLACE(MEM_ADDR, '///', ' ') "TUTORADDR"
		  FROM TUTOR T
          JOIN MEMBER M ON (T.MEM_NO = M.MEM_NO)
		 WHERE T.ENROLL_DATE BETWEEN ? AND ? 
         ORDER BY 
	</entry>
	
	

	
	
	
	
	
	
	
	
</properties>